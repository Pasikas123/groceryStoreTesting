{
	"info": {
		"_postman_id": "a59304cf-c290-4805-be63-de0693595151",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43531170",
		"_collection_link": "https://donatasdailide.postman.co/workspace/Donatas-Dailide's-Workspace~a639a5a0-69d6-4d25-84c2-9aa27ca55f8c/collection/43531170-a59304cf-c290-4805-be63-de0693595151?action=share&source=collection_link&creator=43531170"
	},
	"item": [
		{
			"name": "Get status",
			"item": [
				{
					"name": "Get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check status property', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test('Expect status message', () => {\r",
									"    pm.expect(responseBody.status).to.eql('UP');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all products",
			"item": [
				{
					"name": "Get with valid data",
					"item": [
						{
							"name": "Get all products",
							"item": [
								{
									"name": "Get all products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('id').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').and.is.not.empty;\r",
													"    pm.expect(item).to.have.property('name').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(item).to.have.property('inStock').to.be.a('boolean').and.is.not.null;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all products by category",
							"item": [
								{
									"name": "Get all products by meat-seafood",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('meat-seafood');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=meat-seafood",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "meat-seafood"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by fresh-produce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('fresh-produce');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=fresh-produce",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "fresh-produce"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by candy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('candy');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=candy",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "candy"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by bread-bakery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('bread-bakery');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=bread-bakery",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "bread-bakery"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by dairy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('dairy');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=dairy",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "dairy"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by eggs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array').that.is.not.empty;\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody value/type', () => {\r",
													"    pm.expect(responseBody).to.have.property('category').to.be.a('string').to.be.eql('eggs');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=eggs",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "eggs"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by coffee",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('category').to.be.a('string').to.be.eql('coffee');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=coffee",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "coffee"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all products by results",
							"item": [
								{
									"name": "Get all products by results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody length', () => {\r",
													"    pm.expect(responseBody).lengthOf(2)\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=2",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all products by available",
							"item": [
								{
									"name": "Get all products by false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('inStock').to.be.a('boolean').to.be.eql(false);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?available=false",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "available",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    responseBody.forEach((item) => {\r",
													"    pm.expect(item).to.have.property('inStock').to.be.a('boolean').to.be.eql(true);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?available=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "available",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get with invalid data",
					"item": [
						{
							"name": "Category",
							"item": [
								{
									"name": "Get all products by wrong category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=tea",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "tea"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by numbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=12345",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "12345"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?category=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "category",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Results",
							"item": [
								{
									"name": "Get all products by negative result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'results'. Must be greater than 0.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=-1",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by zero result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'results'. Must be greater than 0.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=0",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by over 20 result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=21",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by entering boolean into result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid format for query parameter.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=false",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by entering string into result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid format for query parameter.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?results=tea",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "results",
													"value": "tea"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Available",
							"item": [
								{
									"name": "Get all products by numbers into available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'available'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?available=12345",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "available",
													"value": "12345"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all products by string into available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').to.be.eql(\"Invalid value for query parameter 'available'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products?available=kazkas",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "available",
													"value": "kazkas"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get a product by ID",
			"item": [
				{
					"name": "Get with valid data",
					"item": [
						{
							"name": "Product by ID",
							"item": [
								{
									"name": "Get product by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"const setId = pm.collectionVariables.set('setId', responseBody.id);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody).to.have.property('id').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('category').to.be.a('string').and.is.not.empty;\r",
													"    pm.expect(responseBody).to.have.property('name').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('manufacturer').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('price').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('current-stock').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('inStock').to.be.a('boolean').and.is.not.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/{{setId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"{{setId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product label",
							"item": [
								{
									"name": "Get product by label (true)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"const setId = pm.collectionVariables.set('setId', responseBody.id);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody).to.have.property('id').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('category').to.be.a('string').and.is.not.empty;\r",
													"    pm.expect(responseBody).to.have.property('name').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('manufacturer').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('price').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('current-stock').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('inStock').to.be.a('boolean').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('product-label').to.be.a('string').and.contains('pdf');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/{{setId}}?product-label=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"{{setId}}"
											],
											"query": [
												{
													"key": "product-label",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product by label (false)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"const setId = pm.collectionVariables.set('setId', responseBody.id);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody).to.have.property('id').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('category').to.be.a('string').and.is.not.empty;\r",
													"    pm.expect(responseBody).to.have.property('name').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('manufacturer').to.be.a('string').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('price').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('current-stock').to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody).to.have.property('inStock').to.be.a('boolean').and.is.not.null;\r",
													"    pm.expect(responseBody).to.not.have.property('product-label');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/{{setId}}?product-label=false",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"{{setId}}"
											],
											"query": [
												{
													"key": "product-label",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get with invalid data",
					"item": [
						{
							"name": "Product by ID",
							"item": [
								{
									"name": "Get product by not existent ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains('No product with id')\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/999999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product by boolean into id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('The product id must be a number.')\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"true"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product by string into id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('The product id must be a number.')\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/kazkur",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"kazkur"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product label",
							"item": [
								{
									"name": "Get product by entering number into label",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid value for query parameter 'product-label'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/{{setId}}?product-label=12345",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"{{setId}}"
											],
											"query": [
												{
													"key": "product-label",
													"value": "12345"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product by entering string into label",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid value for query parameter 'product-label'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/products/{{setId}}?product-label=kazkas",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products",
												"{{setId}}"
											],
											"query": [
												{
													"key": "product-label",
													"value": "kazkas"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Create a new cart",
			"item": [
				{
					"name": "Create new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const cartId = pm.collectionVariables.set('cartId', responseBody.cartId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Check responseBody type', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('Check responseBody every object', () => {\r",
									"    pm.expect(responseBody).to.have.property('created').to.be.a('boolean').and.to.eql(true);\r",
									"    pm.expect(responseBody).to.have.property('cartId').to.be.a('string').and.to.have.lengthOf(21);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add an item to cart",
			"item": [
				{
					"name": "With valid data",
					"item": [
						{
							"name": "Add an item to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"const itemId = pm.collectionVariables.set('itemId', responseBody.itemId);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody type', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody every object', () => {\r",
											"    pm.expect(responseBody).to.have.property('created').to.be.a('boolean').and.to.eql(true);\r",
											"    pm.expect(responseBody).to.have.property('itemId').to.be.a('number').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carts/{{cartId}}/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"{{cartId}}",
										"items"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "With invalid data",
					"item": [
						{
							"name": "Product ID",
							"item": [
								{
									"name": "Add an item with wrong ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 12356,\r\n    \"quantity\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with empty id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with entering boolean into id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": true,\r\n    \"quantity\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with entering string into id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": \"12345\",\r\n    \"quantity\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with false stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"This product is not in stock and cannot be ordered.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 5851,\r\n    \"quantity\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Quantity",
							"item": [
								{
									"name": "Add an item with -1 quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 3674,\r\n    \"quantity\": -1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with 100 quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"The quantity requested exceeds the current stock.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 2585,\r\n    \"quantity\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with boolean into quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 2585,\r\n    \"quantity\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an item with boolean into quantity Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 8739,\r\n    \"quantity\": \"kazkas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Modify an item in the cart",
			"item": [
				{
					"name": "With valid data",
					"item": [
						{
							"name": "Modify an item in the cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"{{cartId}}",
										"items",
										"{{itemId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "With invalid data",
					"item": [
						{
							"name": "Cart ID",
							"item": [
								{
									"name": "Modify an item with wrong cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/999999/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"999999",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with empty cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/true/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"true",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/kazkas/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"kazkas",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Item ID",
							"item": [
								{
									"name": "Modify an item with wrong item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/99999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"99999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with empty item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"true"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/kazkas",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"kazkas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Quantity",
							"item": [
								{
									"name": "Modify an item no quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item quantity to -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": -1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item quantity to 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"The quantity requested is not available in stock.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": \"kazkur\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Replace an item in the cart",
			"item": [
				{
					"name": "With valid data",
					"item": [
						{
							"name": "Replace an item in the cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"{{cartId}}",
										"items",
										"{{itemId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "With invalid data",
					"item": [
						{
							"name": "Cart ID",
							"item": [
								{
									"name": "Modify an item with wrong cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/999999/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"999999",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with empty cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/true/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"true",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/kazkas/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"kazkas",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Item ID",
							"item": [
								{
									"name": "Modify an item with wrong item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/99999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"99999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with empty item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"true"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/kazkas",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"kazkas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product ID",
							"item": [
								{
									"name": "Modify an item no product ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item to wrong product ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 99999,\r\n    \"quantity\": 5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into product id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": true,\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into product id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing productId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": \"kazkas\",\r\n    \"quantity\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Quantity",
							"item": [
								{
									"name": "Modify an item no quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item quantity to -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": -2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item quantity to 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"The quantity requested is not available in stock.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with boolean into quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an item with string into quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing quantity.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": \"kazkas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delete an item in the cart",
			"item": [
				{
					"name": "With valid data",
					"item": [
						{
							"name": "Delete an item in the cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carts/{{cartId}}/items/{{itemId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"{{cartId}}",
										"items",
										"{{itemId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "With invalid data",
					"item": [
						{
							"name": "Cart ID",
							"item": [
								{
									"name": "Delete an item with wrong cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/999999/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"999999",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with empty cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with boolean into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/true/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"true",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with string into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/kazkas/items/{{itemId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"kazkas",
												"items",
												"{{itemId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Item ID",
							"item": [
								{
									"name": "Delete an item with wrong item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/99999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"99999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with empty item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.eql(\"The resource could not be found. Check your endpoint and request method.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with boolean into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"true"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an item with string into item id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No item with id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quantity\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items/kazkas",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items",
												"kazkas"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get a cart",
			"item": [
				{
					"name": "Get with valid data",
					"item": [
						{
							"name": "Get a cart",
							"item": [
								{
									"name": "Get cart by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody properties', () => {\r",
													"    pm.expect(responseBody).to.have.property('items');\r",
													"    pm.expect(responseBody).to.have.property('created');\r",
													"    pm.expect(responseBody.items[0]).to.have.property('id');\r",
													"    pm.expect(responseBody.items[0]).to.have.property('productId');\r",
													"    pm.expect(responseBody.items[0]).to.have.property('quantity');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type/value', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody.items).to.be.an('array');\r",
													"    pm.expect(responseBody.items[0].id).to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody.items[0].productId).to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody.items[0].quantity).to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody.created).to.be.a('string').and.is.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get with invalid data",
					"item": [
						{
							"name": "Get cart by wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody type', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody every object', () => {\r",
											"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carts/555555",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"555555"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get cart items",
			"item": [
				{
					"name": "Get with valid data",
					"item": [
						{
							"name": "Get a cart",
							"item": [
								{
									"name": "Get cart items by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody properties', () => {\r",
													"    pm.expect(responseBody[0]).to.have.property('id');\r",
													"    pm.expect(responseBody[0]).to.have.property('productId');\r",
													"    pm.expect(responseBody[0]).to.have.property('quantity');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type/value', () => {\r",
													"    pm.expect(responseBody).to.be.an('array');\r",
													"    pm.expect(responseBody[0].id).to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody[0].productId).to.be.a('number').and.is.not.null;\r",
													"    pm.expect(responseBody[0].quantity).to.be.a('number').and.is.not.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carts/{{cartId}}/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carts",
												"{{cartId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get with invalid data",
					"item": [
						{
							"name": "Get cart items by wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody type', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody every object', () => {\r",
											"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.contains(\"No cart with id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carts/555555/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carts",
										"555555",
										"items"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Register a new API client",
			"item": [
				{
					"name": "With valid data",
					"item": [
						{
							"name": "Register new client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"const authId = pm.collectionVariables.set('authId', responseBody.accessToken);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody type', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody every object', () => {\r",
											"    pm.expect(responseBody).to.have.property('accessToken').to.be.a('string').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientName\": \"Donny\",\r\n    \"clientEmail\": \"dolbysss@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api-clients",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api-clients"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "With invalid data",
					"item": [
						{
							"name": "ClientName",
							"item": [
								{
									"name": "Register new client numbers into name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid client name.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": 12345,\r\n    \"clientEmail\": \"donnysas@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client boolean into name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid client name.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": true,\r\n    \"clientEmail\": \"donnsday@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client no clientname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client name.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientEmail\": \"donny@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client empty into name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client name.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"\",\r\n    \"clientEmail\": \"donny@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ClientEmail",
							"item": [
								{
									"name": "Register new client numbers into name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client email.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"Donny\",\r\n    \"clientEmail\": 12345\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client boolean into email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client email.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"Donny\",\r\n    \"clientEmail\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client no email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client email.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"Donny\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client empty into email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client email.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"Donny\",\r\n    \"clientEmail\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register new client wrong email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql('Invalid or missing client email.');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientName\": \"Donny\",\r\n    \"clientEmail\": \"kazkodel12#gmail,com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api-clients",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api-clients"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Create a new order",
			"item": [
				{
					"name": "Valid data",
					"item": [
						{
							"name": "Create new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"const orderId = pm.collectionVariables.set('orderId', responseBody.orderId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody type', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody every object', () => {\r",
											"    pm.expect(responseBody).to.have.property('created').to.be.a('boolean').and.to.eql(true);\r",
											"    pm.expect(responseBody).to.have.property('orderId').to.be.a('string').and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donatas\",\r\n    \"comment\": \"kazkas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid data",
					"item": [
						{
							"name": "No auth token",
							"item": [
								{
									"name": "No auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "wrong auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "kazkas",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cart ID",
							"item": [
								{
									"name": "Create new order no cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing cartId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order empty cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing cartId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"\",\r\n    \"customerName\": \"Rokas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order boolean into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing cartId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": true,\r\n    \"customerName\": \"Rokas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order wrong cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing cartId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": 99999,\r\n    \"customerName\": \"Rokas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order string into cart id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing cartId.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"kazkaip\",\r\n    \"customerName\": \"Rokas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer name",
							"item": [
								{
									"name": "Create new order no customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order empty customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order boolean customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order number into customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": 123456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Comment",
							"item": [
								{
									"name": "Create new order numbers comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": 123456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order boolean comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order empty comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Valid data",
					"item": [
						{
							"name": "Update new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders/{{orderId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid data",
					"item": [
						{
							"name": "No auth token",
							"item": [
								{
									"name": "No auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "wrong auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "kazkas",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wrong orderId",
							"item": [
								{
									"name": "Wrong orderId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"No order with id 999999.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/999999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"999999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer name",
							"item": [
								{
									"name": "Update new order empty customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"kazkas\",\r\n    \"customerName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update new order number customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"kazkas\",\r\n    \"customerName\": 123456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update new order boolean customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid or missing customer name.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"kazkas\",\r\n    \"customerName\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Comment",
							"item": [
								{
									"name": "Update new order empty comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update new order numbers comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": 123456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update new order boolean comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid comment.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donce\",\r\n    \"comment\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Valid data",
					"item": [
						{
							"name": "Delete new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/orders/{{orderId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid data",
					"item": [
						{
							"name": "No auth token",
							"item": [
								{
									"name": "No auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "wrong auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "kazkas",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wrong orderId",
							"item": [
								{
									"name": "Wrong orderId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"No order with id 999999.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/999999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"999999"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Valid data",
					"item": [
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody properties', () => {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test('Check every object', () => {\r",
											"    responseBody.forEach((item) => {\r",
											"        item.items.forEach((product) => {\r",
											"            pm.expect(product).to.have.property('id').to.be.a('number').and.is.not.null;\r",
											"            pm.expect(product).to.have.property('productId').to.be.a('number').and.is.not.null;\r",
											"            pm.expect(product).to.have.property('quantity').to.be.a('number').and.is.not.null;\r",
											"        });\r",
											"        pm.expect(item).to.have.property('id').to.be.a('string').and.is.not.empty;\r",
											"        pm.expect(item).to.have.property('items').to.be.an('array').and.have.lengthOf.at.least(1);\r",
											"        pm.expect(item).to.have.property('created').to.be.a('string').and.is.not.empty;\r",
											"        pm.expect(item).to.have.property('customerName').to.be.a('string').and.is.not.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid data",
					"item": [
						{
							"name": "No auth token",
							"item": [
								{
									"name": "No auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Wrong auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid bearer token.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "kazkodel",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/orders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get a single order",
			"item": [
				{
					"name": "Valid data",
					"item": [
						{
							"name": "Get a single order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody properties', () => {\r",
											"    pm.expect(responseBody).to.have.property('id');\r",
											"    pm.expect(responseBody).to.have.property('items');\r",
											"    pm.expect(responseBody).to.have.property('customerName');\r",
											"    pm.expect(responseBody).to.have.property('createdBy');\r",
											"    pm.expect(responseBody).to.have.property('created');\r",
											"    pm.expect(responseBody).to.have.property('timestamp');\r",
											"    pm.expect(responseBody).to.have.property('processed');\r",
											"});\r",
											"\r",
											"pm.test('Check types/values', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody.id).to.be.a('string').to.eql(pm.collectionVariables.get('orderId'));\r",
											"    pm.expect(responseBody.items).to.be.an('array').and.have.lengthOf(1);\r",
											"    pm.expect(responseBody.items[0].id).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.items[0].productId).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.items[0].quantity).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.customerName).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.createdBy).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.created).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.timestamp).to.be.a('number').and.is.not.null;\r",
											"    pm.expect(responseBody.processed).to.be.a('boolean');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/orders/{{orderId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a single order with invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check responseBody properties', () => {\r",
											"    pm.expect(responseBody).to.have.property('id');\r",
											"    pm.expect(responseBody).to.have.property('items');\r",
											"    pm.expect(responseBody).to.have.property('customerName');\r",
											"    pm.expect(responseBody).to.have.property('createdBy');\r",
											"    pm.expect(responseBody).to.have.property('created');\r",
											"    pm.expect(responseBody).to.have.property('timestamp');\r",
											"    pm.expect(responseBody).to.have.property('processed');\r",
											"});\r",
											"\r",
											"pm.test('Check types/values', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody.id).to.be.a('string').to.eql(pm.collectionVariables.get('orderId'));\r",
											"    pm.expect(responseBody.items).to.be.an('array').and.have.lengthOf(1);\r",
											"    pm.expect(responseBody.items[0].id).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.items[0].productId).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.items[0].quantity).to.be.an('number').and.is.not.null;\r",
											"    pm.expect(responseBody.customerName).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.createdBy).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.created).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(responseBody.timestamp).to.be.a('number').and.is.not.null;\r",
											"    pm.expect(responseBody.processed).to.be.a('boolean');\r",
											"    pm.expect(responseBody.invoice).to.be.a('string').and.is.not.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/orders/{{orderId}}?invoice=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders",
										"{{orderId}}"
									],
									"query": [
										{
											"key": "invoice",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid data",
					"item": [
						{
							"name": "Wrong orderId",
							"item": [
								{
									"name": "Wrong orderId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"No order with id 999999.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/999999",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"999999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wrong invoice type",
							"item": [
								{
									"name": "Get a single order with numbers invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid value for query parameter 'invoice'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}?invoice=123456",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											],
											"query": [
												{
													"key": "invoice",
													"value": "123456"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a single order with string invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Invalid value for query parameter 'invoice'. Must be one of: true, false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}?invoice=kazkodel",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											],
											"query": [
												{
													"key": "invoice",
													"value": "kazkodel"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "No auth token",
							"item": [
								{
									"name": "No auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authId}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "wrong auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody type', () => {\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Check responseBody every object', () => {\r",
													"    pm.expect(responseBody).to.have.property('error').to.be.a('string').and.to.eql(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "kazkas",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customerName\": \"Donatas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/orders/{{orderId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "setId",
			"value": ""
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "authId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}